stages:
  - prepare
  - build
  - sign
  - check

# publish langis sources (creates an archive with all patches used to produce Langis)
prepare_langis_sources:
  stage: prepare
  image:
    name: alpine:latest
  script:
    - "mkdir $CI_PROJECT_DIR/sources/"
    - ls $CI_PROJECT_DIR/
    - cp $CI_PROJECT_DIR/.gitlab-ci.yml $CI_PROJECT_DIR/sources/
    - cp $CI_PROJECT_DIR/*.patch $CI_PROJECT_DIR/sources/
    - cp $CI_PROJECT_DIR/*.sh $CI_PROJECT_DIR/sources/
    - tar cfz $CI_PROJECT_DIR/sources/archive.tar.gz $CI_PROJECT_DIR/sources/
  artifacts:
    expire_in: 1 mos
    paths:
      - "$CI_PROJECT_DIR/sources"

# fetchs Signal source code at latest known tag
prepare_fetch_signal_sources:
  stage: prepare
  image:
    name: alpine:latest
  script:
    - apk add git curl jq
    # Fetch the latest git tag from Signal repository
    - "export LATEST_SIGNAL_TAG=\"$(curl https://api.github.com/repos/signalapp/Signal-Android/tags | jq -r '.[] .name' | sed '/-/!{s/$/_/}' | sort -V | grep -v nightly | sed 's/_$//'|tail -n1)\""
    # If we failed to find out the tag, we stop there
    - "if [[ -z \"$LATEST_SIGNAL_TAG\" ]]; then exit 2; fi"
    - "echo \"Latest git version is $LATEST_SIGNAL_TAG\""

    # TODO à réactiver (notif de lancement de build)
    - 'curl -s -d "{ \"topic\": \"perso-langis-ci-alerts\", \"message\": \"version $LATEST_SIGNAL_TAG\", \"title\": \"Langis build started\"}" $NOTIFY_URL > /dev/null'
    # Clone Signal sources using the latest tag found earlier
    - git clone --depth 1 --recurse-submodules -b $LATEST_SIGNAL_TAG https://github.com/WhisperSystems/Signal-Android "$CI_PROJECT_DIR/Signal-Android"
  artifacts:
    expire_in: 1 mos
    paths:
      - "$CI_PROJECT_DIR/Signal-Android"

# Build the container image provided by Signal-Android/reproductible-builds, publish
# it to the local Container registry
prepare_signal_reproductible_build_image:
  stage: prepare
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  when: manual # TODO : à virer ou rendre plus intelligent
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/Signal-Android/reproducible-builds"
      --dockerfile "${CI_PROJECT_DIR}/Signal-Android/reproducible-builds/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

# Build Langis using:
# - Signal-Android/reproductible-builds image
# - Latest Signal-Android sources published
# - Langis patches
build_langis:
  stage: build
  image:
    name: registry.git.legeox.net/labo-gitlab/test-ci-on-rke2-runner-docker-run:latest
    entrypoint: [""]
  script:
    - ls -lha
    - cd $CI_PROJECT_DIR/Signal-Android
    - "for f in $CI_PROJECT_DIR/sources/0000-*.patch; do echo \"$f\"; git apply \"$f\"; done" # apply our patchs
    - "for f in app/src/main/res/values*/strings.xml; do sed -i 's/<string.*name=\"app_name\".*>.*<\\/string>/<string name=\"app_name\">Langis<\\/string>/g' \"$f\"; done" # app rename
    - ./gradlew clean assembleWebsiteProd

    - "mkdir -p $CI_PROJECT_DIR/artifacts"
    - "mv $(find $CI_PROJECT_DIR/Signal-Android/app/build/outputs/apk/websiteProd/release -name *.apk) $CI_PROJECT_DIR/artifacts"   
  artifacts:
    expire_in: 1 mos
    paths:
      - "$CI_PROJECT_DIR/artifacts/*.apk"
      - "$CI_PROJECT_DIR/sources/"

sign_langis:
  stage: sign
  image:
    name: registry.git.legeox.net/labo-gitlab/test-ci-on-rke2-runner-docker-run:latest
    entrypoint: [""]
  script:
    # To sign packages ; you'll need a keystore with your certificate
    # signing packages is important, it also allows application update without removing previous installed version of the app
    # To build the keystore used here, we use:
    #   keytool -genkey -v -keystore keystore.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias app
    #   cat keystore.keystore | base64 > keystore.base64
    # then we provide that base64 encoded file to the CI ; you'll get it back to its original format write after this command is run:
    #- mkdir /ks
    #- "echo \"$KEYSTORE_CRT\" |base64 -d > /ks/keystore.keystore"
    #- "for f in $CI_PROJECT_DIR/artifacts/*unsigned*.apk; do SIGNED_FNAME=\"$(echo $f |sed 's/unsigned/signed/g')\"; echo \"Signing $f\"; /usr/lib/jvm/java-11-openjdk/bin/jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore /keystore.keystore -storepass \"$KEYSTORE_PASSPHR\" $f -signedjar \"$SIGNED_FNAME\" app ;done"
    #- "for f in $CI_PROJECT_DIR/artifacts/*unsigned*.apk; do SIGNED_FNAME=\"$(basename $f |sed 's/unsigned/signed/g').apk\"; docker run --rm -v $CI_PROJECT_DIR/artifacts/:/apks -v /ks:/ks signal-android /usr/local/android-sdk-linux/build-tools/30.0.2/apksigner sign --ks /ks/keystore.keystore --ks-pass pass:$KEYSTORE_PASSPHR --out \"/apks/$SIGNED_FNAME\" \"/apks/$f\" ; done"
    
    - cp $CI_PROJECT_DIR/sources/sign.sh $CI_PROJECT_DIR/artifacts/
    - chmod +x $CI_PROJECT_DIR/artifacts/sign.sh
    - $CI_PROJECT_DIR/artifacts/sign.sh $CI_PROJECT_DIR/artifacts/
    - "rm $CI_PROJECT_DIR/artifacts/*unsigned*.apk"
    - "cd $CI_PROJECT_DIR/artifacts/ && for f in $(find . -iname \"*signal*.apk\"); do mv \"$f\" \"$(echo $f|sed \"s/[Ss][Ii][Gg][Nn][Aa][Ll]/langis/\")\"; done"
    - "ls -lh $CI_PROJECT_DIR/artifacts"
  artifacts:
    expire_in: 1 mos
    paths:
      - "$CI_PROJECT_DIR/artifacts/*.apk"
      - "$CI_PROJECT_DIR/sources/"

check_apks:
  stage: check
  image:
    name: alpine:latest
  timeout: 4 hours
  script:
    - UPLOADS=$(ls -1 $CI_PROJECT_DIR/artifacts/langis*prod*universal*.apk)
    - if [ "$(echo $UPLOADS|wc -l)" != "1" ]; then echo "No or too many files matched."; exit 2 ; fi
    - apk add curl jq bash
    - "chmod +x $CI_PROJECT_DIR/sources/upload-to-vt.sh"
    - "$CI_PROJECT_DIR/sources/upload-to-vt.sh $VT_API_KEY $UPLOADS"
    - 'curl -s -d "{ \"topic\": \"perso-langis-ci-alerts\", \"title\": \"Langis build finished\"}" $NOTIFY_URL >/dev/null'
  artifacts:
    expire_in: 1 mos
    paths:
      - "$CI_PROJECT_DIR/artifacts/*.apk"
      - "$CI_PROJECT_DIR/sources/"
