image: "debian:latest"
variables:
  signal_version: "v4.39.0"
stages:
  - build
patch_and_build_signal:
  stage: build
  script:
    - "apt update && apt install -y git"
    - "apt install -y default-jdk"
    - "apt install -y lib32stdc++6 unzip wget opensc"
    - "wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip" # download android sdk
    - "echo '92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9  sdk-tools-linux-4333796.zip' |sha256sum -c"
    - "unzip sdk-tools-linux-4333796.zip -d /sdk-tools-linux" # unzip android sdk
    - "/sdk-tools-linux/tools/bin/sdkmanager --update"
    
    - "export JAVA_OPTS=\"-Xmx3096M\""
    - "export GRADLE_OPTS=\"-Dorg.gradle.jvmargs=-Xmx4608M\""
    - "export ANDROID_HOME=\"/sdk-tools-linux\"" # set ANDROID_HOME env var

    - "echo $ANDROID_HOME"
    - "mkdir -p $ANDROID_HOME/licenses"
    - "echo d56f5187479451eabf01fb78af6dfcb131a6481e > $ANDROID_HOME/licenses/android-sdk-license"
    - "echo 8933bad161af4178b1185d1a37fbf41ea5269c55 >> $ANDROID_HOME/licenses/android-sdk-license"
    - "yes | /sdk-tools-linux/tools/bin/sdkmanager --licenses || true" # to accept licenses
    - "yes | /sdk-tools-linux/tools/bin/sdkmanager 'build-tools;27.0.3' 'platforms;android-28' 'platform-tools' > /dev/null ||true"

    - "git clone https://github.com/WhisperSystems/Signal-Android.git && cd Signal-Android && git checkout $signal_version" # get signal sources
    - "for f in res/values*/strings.xml; do sed -i 's/<string.*name=\"app_name\".*>.*<\\/string>/<string name=\"app_name\">Langis<\\/string>/g' \"$f\"; done" # app rename
    - "./gradlew clean" # cleanup
    - "git apply $CI_PROJECT_DIR/destroy-gcm-support.patch" # apply our patch
    - "git apply $CI_PROJECT_DIR/fix-build-regretion-on-v4.30.2.patch"
    - "./gradlew --stacktrace assembleWebsiteRelease" #assembleWebsiteDebug
    - "mkdir -p $CI_PROJECT_DIR/artifacts"
    - "find $CI_PROJECT_DIR/Signal-Android/build/outputs -name *.apk"
    - "mv $(find $CI_PROJECT_DIR/Signal-Android/build/outputs -name *.apk) $CI_PROJECT_DIR/artifacts"
    - "ls -lh $CI_PROJECT_DIR/artifacts"
    # To sign packages ; you'll need a keystore with your certificate
    # signing packages is important, it also allows application update without removing previous installed version of the app
    # To build the keystore used here, we use:
    #   keytool -genkey -v -keystore keystore.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias app
    #   cat keystore.keystore | base64 > keystore.base64
    # then we provide that base64 encoded file to the CI ; you'll get it back to its original format write after this command is run:
    - "echo \"$KEYSTORE_CRT\" |base64 -d > /keystore.keystore"
    - "for f in $CI_PROJECT_DIR/artifacts/*unsigned*.apk; do SIGNED_FNAME=\"$(echo $f |sed 's/unsigned/signed/g')\"; echo \"Signing $f\"; jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore /keystore.keystore -storepass \"$KEYSTORE_PASSPHR\" $f -signedjar \"$SIGNED_FNAME\" app ;done"
    - "rm $CI_PROJECT_DIR/artifacts/*unsigned*.apk"
    - "cd $CI_PROJECT_DIR/artifacts/ && for f in $(find . -iname \"*signal*.apk\"); do mv \"$f\" \"$(echo $f|sed \"s/[Ss][Ii][Gg][Nn][Aa][Ll]/langis/\")\"; done"
    - "ls -lh $CI_PROJECT_DIR/artifacts"
  artifacts:
    paths:
      - "$CI_PROJECT_DIR/artifacts/*.apk"
    
    
    
    